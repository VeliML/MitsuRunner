# Copyright (c) 2021 Veli Matti Lastum√§ki (Velsku at lampopumput.info),
#                    Joonas Ihonen (puu at lampopumput.info),
#                    Ilkka Roivainen (iro at lampopumput.info)
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

<<: !include secrets.yaml


# Select used platform (Wemos or Sonoff TH Elite)
<<: !include platform_wemos.yaml
# <<: !include platform_elite.yaml

# Select configuration of Dallas sensors
packages:
  device_base: !include dallas_basic.yaml # Basic configuration
#  device_base: !include dallas_hub.yaml # Separate Dallas-hubs for minimize restarts

# initialize and define Mitsurunner
esphome:
  name: mitsurunner
  platform: $platform_type
  board: $board_type
  on_boot: 
  - switch.turn_off: gpio_relay
  - switch.turn_on: dallas_power  #for Sonoff Elite
  - script.execute: schedule_forced_defrosting
  - script.execute: initialize
  includes:
    - constants.h
    - state.h

# global variables and their initial values
globals:
  - id: G_max_heating_time_passed
    type: bool
    initial_value: 'false'
  - id: G_state #variable containing state machine state
    type: int
    initial_value: 'ST_RESET'
  - id: G_previous_state #variable containing previous state machine state - used for debugging
    type: int
    initial_value: 'ST_RESET'
  - id: G_state_time_passed #for state machine timeouts etc.
    type: bool
    initial_value: 'false'
  - id: G_state_timer #for state machine timeouts etc.
    type: int
    initial_value: '0'
  - id: G_timer_action
    type: std::string 
    initial_value: ""
  - id: G_outdoor_temp_filtered
    type: float
    initial_value: '0.0'
  - id: outdoor_temp_errors
    type: int
    restore_value: no
    initial_value: '0'
  - id: heat_exchanger_temp_errors
    type: int
    restore_value: no
    initial_value: '0'
  - id: G_long_defrosting
    type: bool
    initial_value: 'false'
  - id: G_manual_defrosting
    type: bool
    initial_value: 'false'

# global constants
  - id: G_TOPIC_STATE
    type: const char*
    initial_value: $topic_state
  - id: G_TOPIC_EXCESS_TIMER_STATE
    type: const char*
    initial_value: $topic_excess_timer_state
  - id: G_TOPIC_MIN_HEATING_TIMER_STATE
    type: const char*
    initial_value: $topic_min_heating_timer_state
  - id: G_TOPIC_DEFROSTING_TIMER_STATE
    type: const char*
    initial_value: $topic_defrosting_timer_state  
  - id: G_TOPIC_START_DEFROSTING_TIMER_STATE
    type: const char*
    initial_value: $topic_start_defrosting_timer_state
  - id: G_TOPIC_FORCE_DEFROST_TIMER_STATE
    type: const char*
    initial_value: $topic_force_defrost_timer_state
  - id: G_TOPIC_RESET_TIMER_STATE
    type: const char*
    initial_value: $topic_reset_timer_state
  - id: G_TOPIC_ERROR
    type: const char*
    initial_value: $topic_error
  - id: G_TOPIC_OUTDOOR_TEMPERATURE_RAW
    type: const char*
    initial_value: $topic_outdoor_raw


# switch component to control defrost prevention relay
# if switch on --> Relay actively driven
# if switch off --> Relay in default state
switch:
  - platform: gpio
    pin: $relay_pin
    name: "Relay - defrost prevention"
    id: gpio_relay

  - platform: gpio # 3.3V supply for Dallas sensors (Sonoff Elite only)
    pin: 
      number: $dallas_power_pin
      mode:
        output: true
    id: dallas_power


  - platform: template
    name: "Defrost - force maximum length"
    id: long_defrosting
    lambda: "return id(G_long_defrosting);"
    turn_on_action:
      then:
        lambda: !lambda |-
          switch(id(G_state)) {
              case ST_HEATING_MIN_TIME:
              case ST_IDLE:
              case ST_TEMP_EXCEEDED:
              case ST_TEMP_EXCEEDED_TEMP_DECREASING:
                  id(G_long_defrosting) = true;
                  break;
          }
    turn_off_action:
      then:
          lambda: !lambda "id(G_long_defrosting) = false;"

  - platform: template
    name: "Defrost - manual start"
    id: manual_defrosting
    lambda: "return id(G_manual_defrosting);"
    turn_on_action:
      then:
        lambda: !lambda |-
          switch(id(G_state)) {
              case ST_IDLE:
              case ST_TEMP_EXCEEDED:
              case ST_TEMP_EXCEEDED_TEMP_DECREASING:
                  id(G_manual_defrosting) = true;
                  break;
          }
    turn_off_action:
      then:
          lambda: !lambda "id(G_manual_defrosting) = false;"


sensor:
  # To show state on the web server
  - platform: template
    name: "State"
    id: state_template
    lambda: "return id(G_state);"


 # RSSI monitoring, reports the WiFi signal strength in dBm
  - platform: wifi_signal
    name: "WiFi Signal dBm"
    id: wifi_signal_dbm
    accuracy_decimals: 0
    state_topic: $topic_rssi
    update_interval: 15s
    filters:
    - sliding_window_moving_average:
        window_size: 8     #2 min
        send_every: 8      #2 min

# Error counters for Dallas sensor errors
  - platform: template
    id: report_outdoor_errors
    name: "Errors - outdoor temperature"
    state_topic: $topic_outdoor_errors
    update_interval: 120s
    lambda: |-
        return id(outdoor_temp_errors);

  - platform: template
    id: report_heat_exchanger_errors
    name: "Errors - heat exchanger temperature"
    state_topic: $topic_exchanger_errors
    update_interval: 120s
    lambda: |-
        return id(heat_exchanger_temp_errors);

# Uptime
  - platform: uptime
    id: uptime_counter
    name: "Uptime"
    state_topic: $topic_uptime
    update_interval: 60s


# ----------------------- Code/script section begins ----------------------- #


# State machine to trigger defrosting when needed
  - platform: template
    id: state_machine
    name: "Delta(temperature)"
    state_topic: $topic_delta
    update_interval: 30s
# This C++ code checks if all requirements are fullfilled to trigger defrosting and triggers it then.
    lambda: !lambda |-
        float temperature_delta = (id(G_outdoor_temp_filtered) - id(heat_exchanger_temp).state);

        id(mqtt_client).publish(id(G_TOPIC_STATE), to_string(id(G_state)));

        // Raw outdoor temperature value for debugging
        id(mqtt_client).publish(id(G_TOPIC_OUTDOOR_TEMPERATURE_RAW), to_string(id(outdoor_temp).raw_state));

        switch(id(G_state)) {

            // This state is executed only in reset
            case ST_RESET:
                // Wait first that sensors has read some values.
                if (G_state_time_passed) {
                    if (id(heat_exchanger_temp).state > HEAT_EXCHANGER_MAX_TEMPERATURE ||
                            id(outdoor_temp).state > OUTDOOR_TEMPERATURE_TO_ENTER_OFF_STATE) {
                        id(enter_Off).execute();
                    }
                    // If defrosting is going on
                    else if (temperature_delta <= TEMPERATURE_DELTA_DEFROSTING_STARTED) {
                        id(enter_DefrostingStarted).execute();
                    }
                    else {
                        id(enter_Idle).execute();
                    }
                }
                break;

            case ST_IDLE:
                // If outdoor temperature average exceeds the threshold, switch off the defrost hack logic
                if (id(heat_exchanger_temp).state > HEAT_EXCHANGER_MAX_TEMPERATURE ||
                        id(outdoor_temp).state > OUTDOOR_TEMPERATURE_TO_ENTER_OFF_STATE) {
                    id(enter_Off).execute();
                }
                // If maximum heating time exceeded, start defrosting immediately
                else if (id(G_max_heating_time_passed) || id(G_manual_defrosting)) {
                    id(enter_StartDefrosting).execute();
                }
                // Wait for the temperature delta threshold to be exceeded.
                else if (temperature_delta >= TEMPERATURE_DELTA_TO_DEFROST) {
                    id(enter_TempExceeded).execute();
                }
                break;

            case ST_OFF:
                // Enter normal defrost hack mode if outside temperature is low enough
                if(id(heat_exchanger_temp).state < HEAT_EXCHANGER_MAX_TEMPERATURE &&
                        id(outdoor_temp).state < OUTDOOR_TEMPERATURE_TO_EXIT_OFF_STATE) {
                    id(schedule_forced_defrosting).execute();
                    id(enter_Idle).execute();
                }
                break;

            case ST_TEMP_EXCEEDED:
                // If the latest delta is not smallest from last measurements (delta going back down) and the time threshold is exceeded, start defrosting
                if (((id(delta_temperature_min_from_last_values).state < temperature_delta) && id(G_state_time_passed)) ||
                    id(G_max_heating_time_passed) || id(G_manual_defrosting)) {
                    id(enter_StartDefrosting).execute();
                }
                else if ((id(delta_temperature_min_from_last_values).state >= temperature_delta) && id(G_state_time_passed)) {
                    id(enter_TempExceeded_TempDecreasing).execute();
                }
                else if (temperature_delta < TEMPERATURE_DELTA_TO_DEFROST) {
                    id(enter_Idle).execute();
                }
                break;

            case ST_TEMP_EXCEEDED_TEMP_DECREASING:
                // In this state, temp delta direction is not anymore interesting. It goes even under treshold, which resolves situation or then timers exceeds and the defrosting needs to be started                
                // If temperature continues to drop and goes below TEMPERATURE_DELTA_TO_DEFROST, cancel going to defrosting, outdoor unit has adjusted fan speed and is increasing it
                if ( (temperature_delta < TEMPERATURE_DELTA_TO_DEFROST) ) {
                    id(enter_Idle).execute();
                }
                // Temp has not decreased under treshold during timer, ICE is already preventing air flow and outdoor unit can not increase flekt anymore
                // or maximum heating time is passed --> Defrosting is needed
                else if (id(G_max_heating_time_passed) || id(G_state_time_passed) || id(G_manual_defrosting)) {
                    id(enter_StartDefrosting).execute();
                }
                break;

            case ST_START_DEFROSTING:
                // Timeout to go back to the idle state, if defrosting has not been started.
                if (id(G_state_time_passed)) {
                    id(enter_Idle).execute();
                }
                // Check that defrosting is really started.
                else if (temperature_delta < TEMPERATURE_DELTA_DEFROSTING_STARTED) {
                    if(id(G_long_defrosting)) {
                       id(enter_LongDefrostingStarted).execute();
                    } else {
                        id(enter_DefrostingStarted).execute();
                    }
                }
                break;

            case ST_DEFROSTING_STARTED:
                // Keep the relay off for a while.
                if (id(G_state_time_passed)) {
                    id(enter_HeatingMinTime).execute();
                }
                break;

            case ST_LONG_DEFROSTING_STARTED:
                // Keep the relay on to get maximum defrosting time.
                if (id(G_state_time_passed)) {
                    id(enter_HeatingMinTime).execute();
                }
                break;

            case ST_HEATING_MIN_TIME:
                // Do not react normal temperature delta threshold before min heating time has been passed.
                if (id(G_state_time_passed)) {
                    id(enter_Idle).execute();
                }
                // If the max heating time is passed (should not happen in this state)
                // or the upper temperature limit is exceeded, start defrosting directly.
                else if (id(G_max_heating_time_passed)) {
                    id(enter_StartDefrosting).execute();
                }
                break;

            // Should never end up in here
            default:
                id(enter_Idle).execute();
                break;
        }
        return temperature_delta;

# Sensor to follow direction of temperature change
  - platform: template
    id: delta_temperature_min_from_last_values
    name: "Delta(temperature) direction"
    state_topic: $topic_delta_temperature_latest_min
    update_interval: 30s
    internal: true
    lambda: |-
      float temperature_delta_min = (id(G_outdoor_temp_filtered) - id(heat_exchanger_temp).state);
      return temperature_delta_min;
    filters:
    - min:
        window_size: 5
        send_every: 1

script:

############## Initialize device in first boot ###############
  - id: initialize  
    then:
    # Delay state machine start so that system can connect wifi & MQTT before starting logics
    - delay: !lambda "return INITIALIZE_DELAY * 1000;"
    - script.execute: enter_Reset


# ------------------ State machine state entrance scripts ------------------ #


############## ST_RESET ###############
  - id: enter_Reset
    mode: single
    then:
    - switch.turn_off: gpio_relay
    - switch.turn_off: long_defrosting
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_RESET;
        id(G_state_timer) = RESET_SENSOR_DELAY * 1000; //seconds
    - script.execute: start_state_timer

############### ST_OFF ################
  - id: enter_Off
    mode: single
    then:
    - switch.turn_off: gpio_relay
    - switch.turn_off: long_defrosting
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(start_state_timer).stop();
        id(schedule_forced_defrosting).stop();
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_OFF;

############### ST_IDLE ###############
  - id: enter_Idle
    mode: single
    then:
    - switch.turn_on: gpio_relay
    - lambda: !lambda |-
        id(start_state_timer).stop();
        id(G_previous_state) = id(G_state); 
        
        id(G_timer_action) = to_string(TMR_NOT_PASSED);
        id(report_timer_status).execute();  
        
        id(G_state) = ST_IDLE;

########## ST_TEMP_EXCEEDED ###########
  - id: enter_TempExceeded
    mode: single
    then:
    - switch.turn_on: gpio_relay
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_TEMP_EXCEEDED;
        id(G_state_timer) = TEMPERATURE_DELTA_EXCESS_TIME * 60000;
    - script.execute: start_state_timer

######### ST_TEMP_EXCEEDED_TEMP_DECREASING #########
  - id: enter_TempExceeded_TempDecreasing
    mode: single
    then:
    - switch.turn_on: gpio_relay
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_TEMP_EXCEEDED_TEMP_DECREASING;
        id(G_state_timer) = TEMPERATURE_DELTA_DECREASING_EXCESS_TIME * 60000;
    - script.execute: start_state_timer

######### ST_START_DEFROSTING #########
  - id: enter_StartDefrosting
    mode: single
    then:
    - switch.turn_off: gpio_relay
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_START_DEFROSTING;
        id(G_state_timer) = DEFROST_TIMEOUT * 60000;
    - script.execute: start_state_timer

######## ST_DEFROSTING_STARTED ########
  - id: enter_DefrostingStarted
    mode: single
    then:
    - switch.turn_off: gpio_relay
    - switch.turn_off: long_defrosting
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_DEFROSTING_STARTED;
        id(G_state_timer) =  RELAY_OFF_TIME * 60000;
    - script.execute: schedule_forced_defrosting
    - script.execute: start_state_timer

######## ST_LONG_DEFROSTING_STARTED ########
  - id: enter_LongDefrostingStarted
    mode: single
    then:
    - switch.turn_on: gpio_relay
    - switch.turn_off: long_defrosting
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_LONG_DEFROSTING_STARTED;
        id(G_state_timer) =  RELAY_OFF_TIME * 60000;
    - script.execute: schedule_forced_defrosting
    - script.execute: start_state_timer

######### ST_HEATING_MIN_TIME #########
  - id: enter_HeatingMinTime
    mode: single
    then:
    - switch.turn_on: gpio_relay
    - switch.turn_off: long_defrosting
    - switch.turn_off: manual_defrosting
    - lambda: !lambda |-
        id(G_previous_state) = id(G_state);
        id(G_state) = ST_HEATING_MIN_TIME;
        id(G_state_timer) = (MIN_HEATING_TIME - RELAY_OFF_TIME) * 60000;
    - script.execute: start_state_timer

# -------------------------------------------------------------------------- #

# Script for timer used for state machine timeouts etc.
  - id: start_state_timer
    mode: restart
    then:
    - lambda: !lambda |-
        id(G_timer_action) = to_string(TMR_NOT_PASSED);
        id(report_timer_status).execute();
        
        id(G_previous_state) = id(G_state);
        
        id(G_timer_action) = to_string(TMR_RUNNING);
        id(report_timer_status).execute();
        
        id(G_state_time_passed) = false;             
    - delay: !lambda "return id(G_state_timer);"    
    - lambda: !lambda |-
        id(G_timer_action) = to_string(TMR_PASSED);
        id(report_timer_status).execute();
        
        id(G_state_time_passed) = true;

############### REPORT_TIMER_STATUS ###############
  - id: report_timer_status
    then:
    - lambda: !lambda |-
        const char* id_timer_topic = id(G_TOPIC_ERROR);    
        bool send_message = true;
        switch(id(G_previous_state)) {
            case ST_HEATING_MIN_TIME:
                id_timer_topic = id(G_TOPIC_MIN_HEATING_TIMER_STATE);
                break;
            case ST_DEFROSTING_STARTED:
                id_timer_topic = id(G_TOPIC_DEFROSTING_TIMER_STATE);
                break;
            case ST_START_DEFROSTING:
                id_timer_topic = id(G_TOPIC_START_DEFROSTING_TIMER_STATE);
                break;
            case ST_TEMP_EXCEEDED:
                id_timer_topic = id(G_TOPIC_EXCESS_TIMER_STATE);
                break;
            case ST_RESET:
                id_timer_topic = id(G_TOPIC_RESET_TIMER_STATE);
                break;
            case ST_IDLE:
                send_message = false;
                break;
            default:
                break;
        }
        
        if ( send_message ) {
            id(mqtt_client).publish(id_timer_topic, id(G_timer_action));
        }


# Script for forced defrosting
# Forced defrosting prevents oil to accumulate to some places in device, 
# which may cause compressor not to get oiled when running.
  - id: schedule_forced_defrosting
    mode: restart #timer will be restarted from the beginning allways when called --> starts always again           
    then:
    - lambda: !lambda |-
        id(mqtt_client).publish(id(G_TOPIC_FORCE_DEFROST_TIMER_STATE), to_string(TMR_NOT_PASSED)); // #To indicate restarts
        id(mqtt_client).publish(id(G_TOPIC_FORCE_DEFROST_TIMER_STATE), to_string(TMR_RUNNING));
        id(G_max_heating_time_passed) = false;
    - delay: !lambda "return MAX_HEATING_TIME * 60000;"
    - lambda: !lambda |-
        id(mqtt_client).publish(id(G_TOPIC_FORCE_DEFROST_TIMER_STATE), to_string(TMR_PASSED)); 
        id(G_max_heating_time_passed) = true;

