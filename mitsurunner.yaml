<<: !include platform.yaml

# ESPhomen alustus. 
# Tässä annetaan laitteelle nimi, asetetaan omaa mikrokontrolleria vastaavat tiedot
# Lisäksi tässä alustetaan perusasetukset, kuten ajastus pakkosulatukselle ja pakotetaan sulatusrele pois päältä
esphome:
  name: mitsurunner
#kaksi seuraavaa riviä pitää säätää jokaisen oman rautansa mukaiseksi
  platform: $platform_type
  board: $board_type
  on_boot: # Laitteen bootatessa varmista, että sulatus ei käynnisty päälle kytkemällä se pois päältä ja käynnistä ajastus pakkosulatukselle
  - switch.turn_on: gpio_rele
  - script.execute: ajasta_pakkosulatus
  - script.execute: kaynnista_minimi_aika

# Globaalit muuttujat, joilla estetään esim. alle minimiajan tapahtuvat sulatukset.
globals:
  - id: G_minimiaika_kulunut
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: G_ylityksen_minimiaika_kulunut
    type: bool
    restore_value: false
    initial_value: 'false'

# dallas DS28B20 dataväylä kytketään pinniin D2. Voit vaihtaa tähän pinnin numeron, johon sinulla data tulee.
# laite tulee mittaamaan lämmön 10s välein. Se lienee riittävä tarkkuus tässä. 
dallas:
  - pin: $dallas_pinni
    update_interval: 10s
    id: dallas1

# Releen/transistorin ohjauspinnin ohjaus GPIO pinnin kautta.
# Pinnissä virta = päällä = jännite -- Sulatushuijaus päällä
# Pinnissä ei virtaa = pois päältä = 0v -- sulatushuijausvastus pois päältä.
# D1 pinniin oikeasti rele. Nyt testataan vain ledillä, joka toimii D0 portin kautta toiminto, ennen releeseen kytkemistä.
switch:
  - platform: gpio
    pin: $rele_pinni
    name: "Sulatushuijauksen ohjaus"
    id: gpio_rele

# Lämpötilasensorit, eli nuo dallasit. Sinun pitää tunnistaa ensin fläsäämällä dallasisi osoite. 
# tee kytkentä ja anna laitteen tunnistaa dallasit. Tarkista logeista, mitkä osoitteet sinne tulostuu. 
# lämmitä kädellä toista sensoria ja merkitse se. elä sekoita enää sensoreita tämän jälkeen
# valitse, kummasta tulee kennon lämpöä mittaava sensori ja kummasta ulkolämpötä mittaava
# heitin nyt tarkkuudeksi kaksi desimaalia. On ainakin tarkka...
sensor:
  - platform: dallas
    address: $dallas_address_kenno # tämä on sinulla eri aina ja jokaiselle sensorille uniikki. Näet tämän logeista kun kommentoit tämän rivin pois
    name: "kennonlampotila"
    id: kennonlampo
    accuracy_decimals: 1
    state_topic: $topic_kenno
    filters:    
      - filter_out: nan
  - platform: dallas
    address: $dallas_address_ulko
    name: "ulkolampotila"
    id: ulkolampo
    accuracy_decimals: 1
    state_topic: $topic_ulko
    filters:
      - filter_out: nan

# sulatuksen triggaus logiikka alkaa tästä
# nyt logiikka tekee tätä tarkistusta 10s välein. tämä aika voidaan säätää pidemmäksi, tuskin näin usein tarvitsee tarkistella
  - platform: template
    id: sulatuspaalle
    name: "Kytketaanko sulatus paalle"
    update_interval: 30s
# tässä tarkistetaan lämpötilojen ero, blokki C++ koodia tuon lambda rivin jälkeen. 
# tähän pitäisi ehkä lisätä tarkistus, että ollaan pakkasella. Mutta en lisännyt koska testaan sisällä.
# viisi astetta hardkoodattu --> pitää muuttaa muuttujaksi, jota voi säätää
# vois lisäksi seurata liukuvaa keskiarvoa, tai esim: kolme viimeistä ollut alle "triggerilämmön"
    lambda: !lambda |-
        float lampotilaero = (id(ulkolampo).state - id(kennonlampo).state);
        bool resetoi_lampotilaeron_minimiaika = false;

        // JOS riittävän iso ero ja riittävän kauan aikaa kulunut edellisestä sulatuksesta
        if ( lampotilaero >= 5 && id(G_minimiaika_kulunut) == true) { 
            // JOS ylityskin ollut riittävän kauan aikaa
            if ( id(G_ylityksen_minimiaika_kulunut) == true ) {
                // sulatellaan
                id(tee_sulatus).execute();
                resetoi_lampotilaeron_minimiaika = true;
                }
            // JOS ylityksen minimiaikatimer on käynnisä, odotellaan vain... Eli tyhjä blokki
            else if ( id(kaynnista_lampotileron_minimi_aika).is_running() ) {
                }
            // Ei ylityksen minimiaikaa käynnissä. Käynnistä se, koska  muut ehdot täyttyvät lämmitykselle. 
            else  
                { 
                id(kaynnista_lampotileron_minimi_aika).execute();
                }
            }            
        else {        
            // Pidetään huoli, että jos lämpötilaero laskee alle säädetyn rajan, ylityksen minimiajan ajastin nollataan.
            resetoi_lampotilaeron_minimiaika = true;       
            }
        
        if ( resetoi_lampotilaeron_minimiaika ) {
            id(G_ylityksen_minimiaika_kulunut) = false;
            
            // pysäytä timerkin, jos päällä
            if ( id(kaynnista_lampotileron_minimi_aika).is_running() ) {
                id(kaynnista_lampotileron_minimi_aika).stop();  
                }
            id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/onko_ylityksen_minimiaika_kulunut/state", to_string(0.0));
            }
            
        return lampotilaero;


# sulatus scripti
# Tällä scriptillä hoidetaan sulatus releen ohjaus kytkemään vastuksen pois turn_on ja turn_off välisen ajan
# scriptiä voidaan kutsua vaikka sulatus on meneillään, eli se ei aiheuta "päällekäisiä sulatuksia" jotka pidentävät ajastimen aikaa joka kerta 
# scripti hoitaa releen ohjauksen sulatusasentoon scriptissä määritety ajan ajaksi
# --> AJASTIN PITÄÄ SÄÄTÄÄ SOPIVAKSI
script:
  - id: tee_sulatus
    mode: single #suoritetaan vain, jos ei ole jo sulatusta meneillään. Tämä tulostaa logiin varoituksen vain.
    then:    
    - switch.turn_off: gpio_rele    
    - script.execute: kaynnista_minimi_aika
    - script.execute: ajasta_pakkosulatus
    - lambda: !lambda |-
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/sulatushuijaus/state", to_string(0.0));
    - delay: 30min    
    - switch.turn_on: gpio_rele
    - lambda: !lambda |-
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/sulatushuijaus/state", to_string(1.0));



#Minimiajan toteutus scripti:
#estää minimiajan aikana tapahtuvan sulatuksen. Eli määrittää lyhyimmän mahdollisen lämmitysjakson.
#nyt ajastettu 50min, joka minulla on joskus vetänyt jo kennon ihan tukkoon
  - id: kaynnista_minimi_aika
    mode: single #suoritetaan vain, jos ei ole jo sulatusta meneillään. Tämä tulostaa logiin varoituksen vain.
    then:  
    - lambda: !lambda |-
        id(G_minimiaika_kulunut) = false;
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/onko_minimiaika_kulunut/state", to_string(0.0));
    - delay: 50min #aseta tähän haluamasi lyhyin lämmitysaika. Minulla 50min. Tämä aika lasketaan sulatuksen alusta! Eli sisältää sulatuksen.
    - lambda: !lambda |-
        id(G_minimiaika_kulunut) = true; 
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/onko_minimiaika_kulunut/state", to_string(1.0));
        
#Lämpöyilaeron ylityksen Minimiajan toteutus scripti:
#estää lyhyiden lämpötilaerojen aiheuttamat sulatuksen triggerit
  - id: kaynnista_lampotileron_minimi_aika
    mode: single #suoritetaan vain, jos ei ole jo sulatusta meneillään. Tämä tulostaa logiin varoituksen vain.
    then:  
    - lambda: !lambda |-
        id(G_ylityksen_minimiaika_kulunut) = false;
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/onko_ylityksen_minimiaika_kulunut/state", to_string(0.5));
    - delay: 5min #minimi aika, jonka lämpötilaero oltava yli rajan, jotta sulatus saa alkaa
    - lambda: !lambda |-
        id(G_ylityksen_minimiaika_kulunut) = true; 
        id(mqtt_client).publish("mzl_ln35/lampotilat/sensor/onko_ylityksen_minimiaika_kulunut/state", to_string(1.0));

    
# pakkosulatukselle scripti
# tämä scripti hoitaa pakkosulatuksen ajastukset. 
# tätä kutsutuaan siis kun laite käynnistyy --> pakkosulatus allaolevan ajan kuluttua, jos sitä ennen ei sulateta ja täten nollata ajastinta alkamaan alusta tai
# tätä kutsutaan jokaisen sulatuksen päätteeksi --> pakkosulatuksen ajastus nollautuu jokaisen sulatuksen päätteeksi ja pakkosulatusaikaa aletaan mittaamaan taas alusta
# näin pakkosulatus tulee aina vakioajan päähän edellisestä sulatuksesta tai tämän ohjauslaitteen käynnistämisestä. 
# Pakkosulatuksen ajastus vakiona mitsussa 150min = 2h 30min. Tätä voi säätää oman mielensä mukaan, mikäli uskaltaa ajaa kauemmin pumppua. 
  - id: ajasta_pakkosulatus
    mode: restart #kutsuttaessa scripti uudelleenkäynnistetään.              
    then:
    - delay: 150min #pakkosulatusten väli 150min tähän, jos haluaa noudattaa mitsubishin väliä
    - script.execute: tee_sulatus
