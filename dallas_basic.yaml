# Copyright (c) 2021 Veli Matti LastumÃ¤ki (Velsku at lampopumput.info),
#                    Joonas Ihonen (puu at lampopumput.info),
#                    Ilkka Roivainen (iro at lampopumput.info)
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#############################################################
##  This module specifies Dallas sensors of Mitsurunner    ##
##  ------------------------------------------------       ##
##  keep it as it is                                       ##
#############################################################

# NOTE: Suitable with ESPHome version 2024.6.6 or later

# Temperature sensor (Dallas DS18B20)
one_wire:
  - platform: gpio
    pin: $dallas_pin

# Temperature sensor (Dallas DS18B20) details. 
# You need to check temperature sensors IDs by starting this software and checking IDs from log printing to terminal. 
# Copy IDs from terminal log to platform.yaml file and heat one sensor. Then check which sensor it was and use it for the corresponding topic
sensor:
  - platform: dallas_temp
    update_interval: 5s
    address: $dallas_address_heat_exchanger_temp # Remember to define this on platform.yaml
    name: "Temperature - heat exchanger"
    id: heat_exchanger_temp
    accuracy_decimals: 1
    filters:
      - filter_out: nan
      - filter_out: 85.0
      - exponential_moving_average:
          # Be careful when tweaking this filter, too small alpha may delay defrosting too much
          alpha: 0.05
          send_every: 6 #30s
    on_raw_value:
      then:
        lambda: !lambda |-
            if ((isnan(x)) || (x > 84.0)) {
                if ((id(heat_exchanger_temp_errors) += 1) == 1000) id(heat_exchanger_temp_errors) = 10;
            }

  - platform: dallas_temp
    update_interval: 5s
    address: $dallas_address_outdoor_temp # Remember to define this on platform.yaml
    name: "Temperature - outdoor"
    id: outdoor_temp
    accuracy_decimals: 1
    filters:
      - filter_out: nan
      - filter_out: 85.0
      - exponential_moving_average:
          alpha: 0.01
          send_every: 6 #30s
          send_first_at: 2 #10s
    on_raw_value:
      then:
        lambda: !lambda |-
            // Calculate exponential moving average for outdoor temperature
            // Alpha is adjustable, similar to one in the built-in exponential_moving_average filter
            static const float alpha = 0.1;
            static bool first_time = true;

            if ((isnan(x)) || (x > 84.0))  { //Check if non-valid Dallas value
                if ((id(outdoor_temp_errors) += 1) == 1000) id(outdoor_temp_errors) = 10;
            }
            // Valid Dallas value received, do not use filter until first value received
            else if(first_time) {
                id(G_outdoor_temp_filtered) = x;
                first_time = false;
            }
            else {
                id(G_outdoor_temp_filtered) = id(G_outdoor_temp_filtered) * (1.0 - alpha) + x * alpha;
            }

